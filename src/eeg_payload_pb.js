/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.EEGPayload.EEGPayload', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EEGPayload.EEGPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EEGPayload.EEGPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EEGPayload.EEGPayload.displayName = 'proto.EEGPayload.EEGPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EEGPayload.EEGPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.EEGPayload.EEGPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EEGPayload.EEGPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EEGPayload.EEGPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    meanalphatpnine: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    meanbetatpnine: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    meanthetatpnine: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    meandeltatpnine: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    meanalphatpten: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    meanbetatpten: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    meanthetatpten: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    meandeltatpten: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    meanalphaafseven: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    meanbetaafseven: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    meanthetaafseven: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    meandeltaafseven: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    meanalphaafeight: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    meanbetaafeight: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    meanthetaafeight: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    meandeltaafeight: +jspb.Message.getFieldWithDefault(msg, 17, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EEGPayload.EEGPayload}
 */
proto.EEGPayload.EEGPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EEGPayload.EEGPayload;
  return proto.EEGPayload.EEGPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EEGPayload.EEGPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EEGPayload.EEGPayload}
 */
proto.EEGPayload.EEGPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanalphatpnine(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanbetatpnine(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanthetatpnine(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeandeltatpnine(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanalphatpten(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanbetatpten(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanthetatpten(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeandeltatpten(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanalphaafseven(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanbetaafseven(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanthetaafseven(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeandeltaafseven(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanalphaafeight(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanbetaafeight(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanthetaafeight(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeandeltaafeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EEGPayload.EEGPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EEGPayload.EEGPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EEGPayload.EEGPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EEGPayload.EEGPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeanalphatpnine();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getMeanbetatpnine();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getMeanthetatpnine();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMeandeltatpnine();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMeanalphatpten();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getMeanbetatpten();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getMeanthetatpten();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getMeandeltatpten();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getMeanalphaafseven();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getMeanbetaafseven();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getMeanthetaafseven();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getMeandeltaafseven();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getMeanalphaafeight();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getMeanbetaafeight();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getMeanthetaafeight();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getMeandeltaafeight();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
};


/**
 * optional float meanAlphaTpNine = 1;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanalphatpnine = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanalphatpnine = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float meanBetaTpNine = 2;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanbetatpnine = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanbetatpnine = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float meanThetaTpNine = 3;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanthetatpnine = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanthetatpnine = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float meanDeltaTpNine = 4;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeandeltatpnine = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeandeltatpnine = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float meanAlphaTpTen = 5;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanalphatpten = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanalphatpten = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float meanBetaTpTen = 6;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanbetatpten = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanbetatpten = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float meanThetaTpTen = 7;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanthetatpten = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanthetatpten = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float meanDeltaTpTen = 8;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeandeltatpten = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeandeltatpten = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float meanAlphaAfSeven = 10;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanalphaafseven = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanalphaafseven = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float meanBetaAfSeven = 11;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanbetaafseven = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanbetaafseven = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float meanThetaAfSeven = 12;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanthetaafseven = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanthetaafseven = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float meanDeltaAfSeven = 13;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeandeltaafseven = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeandeltaafseven = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float meanAlphaAfEight = 14;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanalphaafeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanalphaafeight = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float meanBetaAfEight = 15;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanbetaafeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanbetaafeight = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float meanThetaAfEight = 16;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeanthetaafeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeanthetaafeight = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float meanDeltaAfEight = 17;
 * @return {number}
 */
proto.EEGPayload.EEGPayload.prototype.getMeandeltaafeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.EEGPayload.EEGPayload.prototype.setMeandeltaafeight = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


goog.object.extend(exports, proto.EEGPayload);
